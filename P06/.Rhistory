p = p +
theme(
axis.ticks = element_line(colour = "black",size = 0.5)
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### figure output -----------------------------------------------------------
p2
View(setEmptyStyle)
##### Figure 2 #####
countFigNum = 1
SIZE_FONT=20
CairoFonts(regular = "Times","Times")
go1 <- c("Center","Upper","Lower","Left","Right")
######## file loading ########
load("./data/dataset.rda")
data_e1$Locs = factor(data_e1$Locs, go1)
numOfSub = length(unique(data_e1$sub))
sTime = -0.2
eTime = max(data_e1$data_x)
######## Figure 2A ########
data_e1_ave = aggregate( data_y ~ data_x*Locs*Pattern, data = data_e1, FUN = "mean")
config = list(lim_x = c(sTime, eTime),
lim_y = c(-0.5, 0.7),
alpha = 0.4,
stride = 0.1,
label_x = "Time [sec]",
label_y = "Pupil Changes [z-scored]",
title = "",
linetype = TRUE,
grCol = rep(c("#101010","#101010"),10),
gr_outline =  rep(c("#101010","#101010"),10)
)
p <- disp(data_e1,config,1,c("Pattern","Locs"))
p <- p +
facet_grid(. ~ Locs)
config$ylim = round(seq(-0.5,0.75,0.25),2)
config$ylim_stride = 0.05
config$xlim = round(seq(0,4,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p = p +
theme(
axis.ticks = element_line(colour = "black",size = 0.5)
)
# p = setFigureStyle(p,SIZE_FONT)
p <- p + theme(
# legend.position = c(0.9,0.35),
legend.text = element_text(size = 7),
legend.position = c(1, 0),
legend.justification = c(1, 0)
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
######## Figure 2B ########
# data_e1_0deg_min = tapply(data_e1$data_y,list(data_e1$sub),min)
data_e1_ave = data_e1[data_e1$data_x >= 0,]
data_e1_ave = aggregate( data_y ~ sub*Locs*Pattern, data = data_e1_ave, FUN = "mean")
# gName = c('glare top','glare bottom','glare center','glare left','glare right',
#           'control top' ,'control bottom','control center','control left','control right')
#
# f = data.frame(
#   sub = as.character(unique(data_e1_anova$sub)),
#   y = matrix(data_e1_anova$data_y,nrow = numOfSub)
# )
#
# colnames(f) <- c("subject",gName)
# write.csv(f, "[JASP]Bayesian/data_average.csv",row.names=FALSE)
data_e1_anova = data_e1_ave[data_e1_ave$Locs != 'Center',]
anovakun(data_e1_anova,"sAB",long=T, peta=T, gg=T)
fig2a_anovatable = forDrawingSigANOVA
fig2a_ttest = forDrawingPost[["A"]][["bontab"]]
fig2a_inter = forDrawingPost[["A:B"]][["simtab"]]
## cohen's d and BF ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
fig2a_cohend=NULL
fig2a_bf=NULL
comb = rbind(c('Upper','Upper','Upper'),c('Lower','Left','Right'))
for(iLocs in 1:3){
x = apply(rbind(data_e1_anova[data_e1_anova$Locs == comb[1,iLocs] & data_e1_anova$Pattern == 'Glare',]$data_y,
data_e1_anova[data_e1_anova$Locs == comb[1,iLocs] & data_e1_anova$Pattern == 'Control',]$data_y),2, mean)
y = apply(rbind(data_e1_anova[data_e1_anova$Locs == comb[2,iLocs] & data_e1_anova$Pattern == 'Glare',]$data_y,
data_e1_anova[data_e1_anova$Locs == comb[2,iLocs] & data_e1_anova$Pattern == 'Control',]$data_y),2, mean)
n = length(x)
sc = sqrt((n*(var(x))+n*(var(y)))/(n*2))
fig2a_cohend = rbind(fig2a_cohend,round(abs(mean(x)-mean(y))/sc,3))
bayesF = ttestBF(x = x, y = y, paired=TRUE)
fig2a_bf = rbind(fig2a_bf,round(exp(bayesF@bayesFactor[["bf"]]),3))
}
fig2c_cohend=NULL
fig2c_bf=NULL
for(iLocs in 2:5){
x = data_e1_anova[data_e1_anova$Locs == go1[iLocs] & data_e1_anova$Pattern == 'Glare',]$data_y
y = data_e1_anova[data_e1_anova$Locs == go1[iLocs] & data_e1_anova$Pattern == 'Control',]$data_y
n = length(x)
sc = sqrt((n*(var(x))+n*(var(y)))/(n*2))
fig2c_cohend = rbind(fig2c_cohend,round(abs(mean(x)-mean(y))/sc,3))
bayesF = ttestBF(x = x, y = y, paired=TRUE)
fig2c_bf = rbind(fig2c_bf,round(exp(bayesF@bayesFactor[["bf"]]),3))
}
## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
config$label_x = ''
config$title = "Averaged Pupil Changes [z-scored]"
data_e1_anova$sub = subName[data_e1_anova$sub]
config$grCol = rep(c("black","white"),5)
config$gr_outline = rep(c("black","black"),5)
p <- dispLineGraph(data_e1_ave,config,c("Locs","Pattern"))+
# geom_point(data=data_e1_anova,aes(x = Pattern,y = data_y, group=interaction(Locs,sub)), color="black",alpha=0.2)+
# geom_line(data=data_e1_anova,aes(x = Pattern,y = data_y, group=interaction(Locs,sub),color=sub),alpha=0.8)+
facet_grid(. ~ Locs)
config$ylim = round(seq(-0.3,0.5,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p = p + theme(
axis.ticks = element_line(colour = "black",size = 0.5),
legend.position = c(1, 0),
legend.justification = c(1, 0),
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
######## Figure 2C ########
data_e1_diff = data_e1_ave[data_e1_ave$Pattern == 'Glare',]
data_e1_diff$Pattern = NULL
data_e1_diff$data_y = data_e1_ave[data_e1_ave$Pattern == 'Glare',]$data_y - data_e1_ave[data_e1_ave$Pattern == 'Control',]$data_y
config$label_y = "Differences [z-scored]"
pVal=NULL
for(iLocs in 1:5){
y = data_e1_diff[data_e1_diff$Locs == go1[iLocs],]$data_y
model = t.test(y, mu=0)
pVal = rbind(pVal,model[["p.value"]])
}
p <- dispLineGraph(data_e1_diff,config,c("Locs"))
p <- p + theme(
legend.position = 'none'
)
config$ylim = round(seq(-0.3,0.1,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,5,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p = p +
theme(
# axis.ticks = element_line(colour = "black",size = 0.5)
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### figure output -----------------------------------------------------------
p3
##### Figure 2 #####
countFigNum = 1
SIZE_FONT=20
CairoFonts(regular = "Times","Times")
go1 <- c("Center","Upper","Lower","Left","Right")
######## file loading ########
load("./data/dataset.rda")
data_e1$Locs = factor(data_e1$Locs, go1)
numOfSub = length(unique(data_e1$sub))
sTime = -0.2
eTime = max(data_e1$data_x)
######## Figure 2A ########
data_e1_ave = aggregate( data_y ~ data_x*Locs*Pattern, data = data_e1, FUN = "mean")
config = list(lim_x = c(sTime, eTime),
lim_y = c(-0.5, 0.7),
alpha = 0.4,
stride = 0.1,
label_x = "Time [sec]",
label_y = "Pupil Changes [z-scored]",
title = "",
linetype = TRUE,
grCol = rep(c("#101010","#101010"),10),
gr_outline =  rep(c("#101010","#101010"),10)
)
p <- disp(data_e1,config,1,c("Pattern","Locs"))
p <- p +
facet_grid(. ~ Locs)
config$ylim = round(seq(-0.5,0.75,0.25),2)
config$ylim_stride = 0.05
config$xlim = round(seq(0,4,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p = p +
theme(
axis.ticks = element_line(colour = "black",size = 0.5)
)
# p = setFigureStyle(p,SIZE_FONT)
p <- p + theme(
# legend.position = c(0.9,0.35),
legend.text = element_text(size = 7),
legend.position = c(1, 0),
legend.justification = c(1, 0)
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
######## Figure 2B ########
# data_e1_0deg_min = tapply(data_e1$data_y,list(data_e1$sub),min)
data_e1_ave = data_e1[data_e1$data_x >= 0,]
data_e1_ave = aggregate( data_y ~ sub*Locs*Pattern, data = data_e1_ave, FUN = "mean")
# gName = c('glare top','glare bottom','glare center','glare left','glare right',
#           'control top' ,'control bottom','control center','control left','control right')
#
# f = data.frame(
#   sub = as.character(unique(data_e1_anova$sub)),
#   y = matrix(data_e1_anova$data_y,nrow = numOfSub)
# )
#
# colnames(f) <- c("subject",gName)
# write.csv(f, "[JASP]Bayesian/data_average.csv",row.names=FALSE)
data_e1_anova = data_e1_ave[data_e1_ave$Locs != 'Center',]
anovakun(data_e1_anova,"sAB",long=T, peta=T, gg=T)
fig2a_anovatable = forDrawingSigANOVA
fig2a_ttest = forDrawingPost[["A"]][["bontab"]]
fig2a_inter = forDrawingPost[["A:B"]][["simtab"]]
## cohen's d and BF ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
fig2a_cohend=NULL
fig2a_bf=NULL
comb = rbind(c('Upper','Upper','Upper'),c('Lower','Left','Right'))
for(iLocs in 1:3){
x = apply(rbind(data_e1_anova[data_e1_anova$Locs == comb[1,iLocs] & data_e1_anova$Pattern == 'Glare',]$data_y,
data_e1_anova[data_e1_anova$Locs == comb[1,iLocs] & data_e1_anova$Pattern == 'Control',]$data_y),2, mean)
y = apply(rbind(data_e1_anova[data_e1_anova$Locs == comb[2,iLocs] & data_e1_anova$Pattern == 'Glare',]$data_y,
data_e1_anova[data_e1_anova$Locs == comb[2,iLocs] & data_e1_anova$Pattern == 'Control',]$data_y),2, mean)
n = length(x)
sc = sqrt((n*(var(x))+n*(var(y)))/(n*2))
fig2a_cohend = rbind(fig2a_cohend,round(abs(mean(x)-mean(y))/sc,3))
bayesF = ttestBF(x = x, y = y, paired=TRUE)
fig2a_bf = rbind(fig2a_bf,round(exp(bayesF@bayesFactor[["bf"]]),3))
}
fig2c_cohend=NULL
fig2c_bf=NULL
for(iLocs in 2:5){
x = data_e1_anova[data_e1_anova$Locs == go1[iLocs] & data_e1_anova$Pattern == 'Glare',]$data_y
y = data_e1_anova[data_e1_anova$Locs == go1[iLocs] & data_e1_anova$Pattern == 'Control',]$data_y
n = length(x)
sc = sqrt((n*(var(x))+n*(var(y)))/(n*2))
fig2c_cohend = rbind(fig2c_cohend,round(abs(mean(x)-mean(y))/sc,3))
bayesF = ttestBF(x = x, y = y, paired=TRUE)
fig2c_bf = rbind(fig2c_bf,round(exp(bayesF@bayesFactor[["bf"]]),3))
}
## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
config$label_x = ''
config$title = "Averaged Pupil Changes [z-scored]"
data_e1_anova$sub = subName[data_e1_anova$sub]
config$grCol = rep(c("black","white"),5)
config$gr_outline = rep(c("black","black"),5)
p <- dispLineGraph(data_e1_ave,config,c("Locs","Pattern"))+
# geom_point(data=data_e1_anova,aes(x = Pattern,y = data_y, group=interaction(Locs,sub)), color="black",alpha=0.2)+
# geom_line(data=data_e1_anova,aes(x = Pattern,y = data_y, group=interaction(Locs,sub),color=sub),alpha=0.8)+
facet_grid(. ~ Locs)
config$ylim = round(seq(-0.3,0.5,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p = p + theme(
# axis.ticks = element_line(colour = "black",size = 0.5),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank(),
legend.position = c(1, 0),
legend.justification = c(1, 0),
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
######## Figure 2C ########
data_e1_diff = data_e1_ave[data_e1_ave$Pattern == 'Glare',]
data_e1_diff$Pattern = NULL
data_e1_diff$data_y = data_e1_ave[data_e1_ave$Pattern == 'Glare',]$data_y - data_e1_ave[data_e1_ave$Pattern == 'Control',]$data_y
config$label_y = "Differences [z-scored]"
pVal=NULL
for(iLocs in 1:5){
y = data_e1_diff[data_e1_diff$Locs == go1[iLocs],]$data_y
model = t.test(y, mu=0)
pVal = rbind(pVal,model[["p.value"]])
}
p <- dispLineGraph(data_e1_diff,config,c("Locs"))
p <- p + theme(
legend.position = 'none'
)
config$ylim = round(seq(-0.3,0.1,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,5,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p = p +
theme(
axis.ticks = element_line(colour = "black",size = 0.5)
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### figure output -----------------------------------------------------------
p2
#### Package instalation ####
library(rjson)
library(ggplot2)
library(ggpubr)
library(Cairo)
library(gridExtra)
library(effsize)
library(BayesFactor)
library(rjson)
library(reshape)
library(quickpsy)
if(exists(".anovakun.env")){
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
}else{
.anovakun.env <- new.env()
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
attach(.anovakun.env)
}
subName = NULL
for( i in seq(30)){
if(i<10){subName = rbind(subName,paste("s0", i, sep = ""))}
else{subName = rbind(subName,paste("s", i, sep = ""))}
}
setEmptyStyle <- function(gData,config,size_font=20){
gData <- gData +theme(
panel.border = element_blank(),
axis.ticks.length=unit(.5, "cm"),
axis.ticks.x = element_line(colour = "black",size = 0.5),
# axis.line = element_line(),
axis.text.x = element_text(colour="black"),
axis.text.y = element_text(colour="black"),
panel.background = element_rect(fill = "transparent",size = 0.5),
panel.grid.major = element_line(colour = NA),
panel.grid.major.y = element_line(colour = "gray", size = 0.05),
panel.grid.major.x = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.ticks = element_line(colour = "black",size = 0.5),
text = element_text(size = size_font,family = "Times"),
# text = element_text(size = size_font,family = "Source Han Sans JP ExtraLight"),
legend.title = element_text(size=(size_font/2)),
legend.text = element_text(size=(size_font/2)),
legend.key=element_rect(colour="transparent", fill=NA),
plot.background=element_rect(fill="transparent", colour=NA),
legend.background=element_rect(fill="transparent", colour=NA),
plot.title = element_text(size = size_font,hjust=-0.2)
)
gData = gData +
scale_y_continuous(breaks=config$ylim)+
# scale_x_continuous(breaks=config$xlim)+
coord_cartesian(xlim=c(config$xlim[1]-config$xlim_stride,rev(config$xlim)[1]+config$xlim_stride),
ylim=c(config$ylim[1]-config$ylim_stride,rev(config$ylim)[1]+config$ylim_stride),
expand=FALSE)+
theme(
axis.ticks = element_line(colour = "black",size = 0.5)
)
if(!is.null(config$xlim)){
gData = gData +
annotate(x=config$xlim[1],xend=rev(config$xlim)[1],
y=config$ylim[1]-config$ylim_stride, yend=config$ylim[1]-config$ylim_stride,
colour="black", lwd=0.5, geom="segment")
}
if(!is.null(config$ylim)){
gData = gData +
annotate(x=config$xlim[1]-config$xlim_stride, xend=config$xlim[1]-config$xlim_stride,
y=config$ylim[1], yend=rev(config$ylim)[1],
colour="black", lwd=0.5, geom="segment")
}
return(gData)
}
# Function definition
rejectOutlier <- function(ribbondata, vName){
eval(parse(text=paste("dat_mean = tapply(ribbondata$",vName,
",list(ribbondata$sub),mean)", sep="")))
eval(parse(text=paste("dat_sd = tapply(ribbondata$",vName,
",list(ribbondata$sub),sd)", sep="")))
numOfSub = unique(ribbondata$sub)
dat_mean = matrix(dat_mean,ncol = 1)
dat_mean = dat_mean[!is.na(dat_mean)]
dat_sd = matrix(dat_sd,ncol = 1)*3
dat_sd = dat_sd[!is.na(dat_sd)]
t=NULL
for(i in 1:length(numOfSub)){
t = rbind(t,dim(ribbondata[ribbondata$sub == numOfSub[i],])[1])
}
dat_mean = rep(dat_mean,times = t)
ribbondata$minsd = dat_mean - rep(dat_sd,times = t)
ribbondata$maxsd = dat_mean + rep(dat_sd,times = t)
eval(parse(text=paste("ribbondata = ribbondata[ribbondata$",vName,
"< ribbondata$maxsd,]", sep="")))
eval(parse(text=paste("ribbondata = ribbondata[ribbondata$",vName,
"> ribbondata$minsd,]", sep="")))
return(ribbondata)
}
combineGraphs <- function(graphNum,p,layout){
titleStr = c("'(a)'", "'(b)'", "'(c)'", "'(d)'", "'(e)'", "'(f)'", "'(g)'")
st = paste(p,graphNum, sep = "", collapse=",")
labelSt = titleStr[seq(1,length(graphNum))]
labelSt = paste(labelSt, collapse=",")
ncolNum = round(length(graphNum) / 2 )
if (is.numeric(layout)){
eval(parse(text=paste("p = grid.arrange(",
st ,",layout_matrix = layout)",
sep="")))
}else{
eval(parse(text=paste("p = ggarrange(",
st ,",labels = c(",
labelSt,
"),ncol = 2, nrow =", ncolNum, ")",
sep="")))
}
return(p)
}
disp <- function(ribbondata,config,shadeFl,factors,numOfSub=0){
if (shadeFl == 1) {
if(numOfSub == 0) {numOfSub = length(unique(ribbondata$sub))}
eval(parse(text=paste(
"data_std = aggregate( data_y ~ data_x * ",factors[1],"*",factors[2],
", data = ribbondata, FUN = 'sd')",
sep="")))
eval(parse(text=paste(
"ribbondata = aggregate( data_y ~ data_x * ",factors[1],"*",factors[2],
", data = ribbondata, FUN = 'mean')",
sep="")))
data_std$data_y <- data_std$data_y / sqrt(numOfSub)
ribbondata$ymin <- ribbondata$data_y - data_std$data_y
ribbondata$ymax <- ribbondata$data_y + data_std$data_y
eval(parse(text=paste(
# "p <- ggplot(ribbondata,aes(x = data_x, y = data_y, colour = ", factors[1],", group = ",factors[1],"))+",
"p <- ggplot(ribbondata,aes(x = data_x, y = data_y, colour = ", factors[2],", group = ",factors[1],"))+",
# "annotation_raster(image, -Inf, Inf, -Inf, Inf) +",
"geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = ",factors[2],", group = ",factors[1], "), color = 'gray', fill = 'gray', alpha = config$alpha, size = 0.05)",
sep="")))
if(config$linetype){
eval(parse(text=paste("p = p + ",
"geom_line(aes(linetype=",factors[1],"))",
sep="")))
}else{
p = p + geom_line()
}
if(!is.null(config$grCol)){
p <- p +
# scale_color_manual(values = config$grCol, name = factors[1])+
scale_fill_manual(values = config$grCol)+
scale_color_manual(values = config$grCol)
}
p <- p +
ggtitle(config$title) +
xlab(config$label_x) + ylab(config$label_y) +
coord_cartesian(xlim = config$lim_x,ylim = config$lim_y) +
scale_x_continuous(expand = c(0, 0))
}else{
eval(parse(text=paste(
"p <- ggplot(ribbondata,aes(x = data_x, y = data_y, colour = ", factors[1],", group = ",factors[2],"))+",
# "geom_line(aes(linetype = Type))",
"geom_line()",
sep="")))
if(!is.null(config$grCol)){
p <- p +
scale_color_manual(values = config$grCol)
}
p <- p +
geom_vline(xintercept=0, colour='black', linetype='longdash', size = 0.1) +
ggtitle(config$title) +
xlab(config$label_x) + ylab(config$label_y) +
coord_cartesian(xlim=config$lim_x, ylim=config$lim_y) +
scale_x_continuous(expand = c(0, 0))
# scale_y_continuous(expand = c(0, 0.1))
# scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0))
}
# p = setBarFigureStyle(p)
return(p)
}
dispLineGraph <- function(ribbondata, config, factors,numOfSub = 0){
if(numOfSub == 0) {numOfSub = length(unique(ribbondata$sub))}
if(length(factors) == 1){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'mean')", sep="")))
}
else if(length(factors) == 2){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'mean')", sep="")))
}else{
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'mean')", sep="")))
}
std_data$data_y = std_data$data_y / sqrt(numOfSub)
ribbondata$SE_min <- ribbondata$data_y - std_data$data_y
ribbondata$SE_max <- ribbondata$data_y + std_data$data_y
# , color = ", factors[1],, color = ", factors[1],aes(shape = ", factors[2],"),
if(length(factors) == 1){
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],", y = data_y))", sep="")))
eval(parse(text=paste("p = p + geom_point(size = 3, color='black')", sep="")))
} else if(length(factors) == 2){
# , shape =  factors[2],
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[2],", y = data_y",
",group = ",factors[2],
"))", sep="")))
eval(parse(text=paste("p = p + geom_point(aes(color = ",factors[2],", fill = ",factors[2],"),size = 3, shape=21)", sep="")))
} else{
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],
", y = data_y, color = ", factors[1],", group = ",factors[2],"))", sep="")))
eval(parse(text=paste("p = p + geom_point(aes(shape = ", factors[2],"), size = 3)", sep="")))
}
if(!is.null(config$grCol)){
p = p + scale_fill_manual(values = config$grCol) +
scale_color_manual(values = config$gr_outline)
}
if(!is.null(config$title)){
p = p + ggtitle(config$title)
}
p = p +
geom_errorbar(aes(ymin = SE_min, ymax = SE_max),size = 0.1, width = 0.1,color="black")+
xlab(config$label_x) + ylab(config$label_y) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_blank()
)
return(p)
}
