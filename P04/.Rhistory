data_tertile_e2 <- data.frame(
sub =  data$sub,
data_y = data$responses_sorted,
RT = data$RT_sorted,
Tertile = data$tertile
)
x = as.numeric(data_tertile_e2$Tertile)
y = data_tertile_e2$data_y
f <- y ~  a*x + b
model1 <- nls(f, start = c(a = 0, b = 0))
f <- y ~  a*x^2 + b*x + c
model2 <- nls(f, start = c(a = 0, b = 0, c=0))
if (AIC(model1) > AIC(model2)){
model = model2
}else{
model = model1
}
df <- data.frame(x = seq(1, 5, length = 10))
data_curve = data.frame(
Tertile = df$x,
yy = predict(model, df)
)
tertile_e1_tVal = round(summary(model)[["coefficients"]]['b',]['t value'],3)
tertile_e1_pVal = round(summary(model)[["coefficients"]]['b',]['Pr(>|t|)'],3)
# lm_model_e2 = lm(data = data_tertile_e2, data_y ~ Tertile)
data_tertile_e2 = aggregate( . ~ sub*Tertile, data = data_tertile_e2, FUN = "mean")
r_e2 = cor.test(data_tertile_e2$Tertile, data_tertile_e2$data_y)
f = data.frame(
sub = as.character(unique(data_tertile_e2$sub)),
x = data_tertile_e2$Tertile,
y = data_tertile_e2$data_y
)
############ the number of trials ################# #######
data_numOfTrial = aggregate( numOfTrial ~ sub*Responses, data = data_corr, FUN = "max")
ave_numOfTrial = aggregate( numOfTrial ~ Responses, data = data_numOfTrial, FUN = "mean")
ave_numOfTrial$numOfTrial = round(ave_numOfTrial$numOfTrial,2)
sd_numOfTrial = aggregate( numOfTrial ~ Responses, data = data_numOfTrial, FUN = "sd")
sd_numOfTrial$numOfTrial = round(sd_numOfTrial$numOfTrial,2)
# colnames(f) <- c("subject",go1)
# write.csv(f, "../[JASP]Bayesian/data_average.csv",row.names=FALSE)
# regBF_e2 = regressionBF(data_y ~ Tertile, data = data_tertile_e2, progress=FALSE)
# regBF_e2 = round(exp(regBF_e2@bayesFactor[["bf"]]),3)
round(summary(model)[['coefficients']]['b',]['Estimate'],3)
summary(model)[['coefficients']]
summary(model)
tertile_e2_pVal
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e1_endogenous_Switching/final/showResponse.R')
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e1_endogenous_Switching/final/makeDataSet.R')
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e1_endogenous_Switching/final/showResponse.R')
width_fig=3
height_fig=4
CairoFonts(regular = "Times","Times")
CairoPDF(file=paste(saveLoc,"e1_res", sep = ""),
width=width_fig, height=height_fig)
print(p)
dev.off()
saveLoc
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e1_endogenous_Switching/final/showResponse.R')
load("./data/dataset_e2.rda")
View(data_corr)
View(data_tertile)
View(data_tonic)
View(data_res_tonic)
View(data_res_phasic)
View(data_res)
## data loading ------------------------------------------------------------
data=fromJSON(file="/Users/yutasuzuki/Desktop/Pxx_auditoryIllusion/e2_baseLinePupil_Switch/data.json")
dat <- list((matrix(unlist(data$PDR_baseline),nrow=length(data$PDR_baseline),byrow=T)),
(matrix(unlist(data$PDR),nrow=length(data$PDR),byrow=T)),
unlist(data$PDR_size_sorted),
unlist(data$PDR_size),
unlist(data$sub),
unlist(data$tertile),
unlist(data$numOfSwitch_sorted),
unlist(data$numOfSwitch),
unlist(data$numOfTrial),
unlist(data$ampOfmSaccade),
unlist(data$RT))
names(dat) <- c('PDR_baseline','y', 'PDRsize_sorted', 'PDRsize', 'sub',
'Tertile','numOfSwitch_sorted',
'numOfSwitch','numOfTrial','ampOfmSaccade','RT')
numOfTrial = dim(dat$y)[1]
numOfSub = length(unique(dat$sub))
lengthOfTime = dim(dat$y)[2]
timeLen = c(sTime,eTime)
x = seq(sTime,eTime,length=lengthOfTime)
ind_data <- data.frame(
sub =  rep( dat$sub, times = rep( lengthOfTime, numOfTrial)),
data_y = t(matrix(t(dat$y),nrow=1)),
data_x = x,
Size = rep(dat$PDRsize, times = rep( lengthOfTime, numOfTrial)),
Size_sorted = rep(dat$PDRsize_sorted, times = rep( lengthOfTime, numOfTrial)),
Tertile = rep( go1[dat$Tertile], times = rep( lengthOfTime, numOfTrial)),
State = rep( go2[dat$numOfSwitch+1], times = rep( lengthOfTime, numOfTrial)),
numOfTrial = rep( dat$numOfTrial, times = rep( lengthOfTime, numOfTrial)),
numOfSwitch = rep( dat$numOfSwitch, times = rep( lengthOfTime, numOfTrial)),
numOfSwitch_sorted = rep( dat$numOfSwitch_sorted, times = rep( lengthOfTime, numOfTrial)),
ampOfmSaccade = rep( dat$ampOfmSaccade, times = rep( lengthOfTime, numOfTrial)),
RT = rep( dat$RT, times = rep( lengthOfTime, numOfTrial))
)
data_timeCourse = data.frame(
sub =  rep( dat$sub, times = rep( lengthOfTime, numOfTrial)),
Baseline = t(matrix(t(dat$PDR_baseline),nrow=1)),
Transient = t(matrix(t(dat$y),nrow=1)),
data_x = x,
numOfSwitch = rep( dat$numOfSwitch, times = rep( lengthOfTime, numOfTrial))
)
sTime = -4
eTime = 4
analysisWin = 0
countFigNum=1
saveLoc = "/Users/yutasuzuki/Box/Journal_Paper/Pxx_AuditoryStream/[Rmd]Results/data/"
go1 = c("1", "2", "3", "4", "5")
go2 = c("unswitched(=0)", "switched(>0)", "switched(>0)", "switched(>0)", "switched(>0)")
go3 = c("0", "1", "2+","3","4","5")
go4 = c("0", "1", "2+")
## data loading ------------------------------------------------------------
data=fromJSON(file="/Users/yutasuzuki/Desktop/Pxx_auditoryIllusion/e2_baseLinePupil_Switch/data.json")
dat <- list((matrix(unlist(data$PDR_baseline),nrow=length(data$PDR_baseline),byrow=T)),
(matrix(unlist(data$PDR),nrow=length(data$PDR),byrow=T)),
unlist(data$PDR_size_sorted),
unlist(data$PDR_size),
unlist(data$sub),
unlist(data$tertile),
unlist(data$numOfSwitch_sorted),
unlist(data$numOfSwitch),
unlist(data$numOfTrial),
unlist(data$ampOfmSaccade),
unlist(data$RT))
names(dat) <- c('PDR_baseline','y', 'PDRsize_sorted', 'PDRsize', 'sub',
'Tertile','numOfSwitch_sorted',
'numOfSwitch','numOfTrial','ampOfmSaccade','RT')
numOfTrial = dim(dat$y)[1]
numOfSub = length(unique(dat$sub))
lengthOfTime = dim(dat$y)[2]
timeLen = c(sTime,eTime)
x = seq(sTime,eTime,length=lengthOfTime)
ind_data <- data.frame(
sub =  rep( dat$sub, times = rep( lengthOfTime, numOfTrial)),
data_y = t(matrix(t(dat$y),nrow=1)),
data_x = x,
Size = rep(dat$PDRsize, times = rep( lengthOfTime, numOfTrial)),
Size_sorted = rep(dat$PDRsize_sorted, times = rep( lengthOfTime, numOfTrial)),
Tertile = rep( go1[dat$Tertile], times = rep( lengthOfTime, numOfTrial)),
State = rep( go2[dat$numOfSwitch+1], times = rep( lengthOfTime, numOfTrial)),
numOfTrial = rep( dat$numOfTrial, times = rep( lengthOfTime, numOfTrial)),
numOfSwitch = rep( dat$numOfSwitch, times = rep( lengthOfTime, numOfTrial)),
numOfSwitch_sorted = rep( dat$numOfSwitch_sorted, times = rep( lengthOfTime, numOfTrial)),
ampOfmSaccade = rep( dat$ampOfmSaccade, times = rep( lengthOfTime, numOfTrial)),
RT = rep( dat$RT, times = rep( lengthOfTime, numOfTrial))
)
data_timeCourse = data.frame(
sub =  rep( dat$sub, times = rep( lengthOfTime, numOfTrial)),
Baseline = t(matrix(t(dat$PDR_baseline),nrow=1)),
Transient = t(matrix(t(dat$y),nrow=1)),
data_x = x,
numOfSwitch = rep( dat$numOfSwitch, times = rep( lengthOfTime, numOfTrial))
)
data_timeCourse[data_timeCourse$numOfSwitch > 2,]$numOfSwitch = 2
data_timeCourse$numOfSwitch = go4[data_timeCourse$numOfSwitch+1]
data_timeCourse = aggregate( . ~ sub*data_x*numOfSwitch, data = data_timeCourse, FUN = "mean")
save(data_timeCourse,file = paste(currentLoc,"/dataset_timeCourse.rda", sep = ""))
data_res_phasic = ind_data[ind_data$data_x > analysisWin,]
data_res_phasic[data_res_phasic$numOfSwitch > 2,]$numOfSwitch = 2
data_res_phasic$numOfSwitch = go3[data_res_phasic$numOfSwitch+1]
View(data_res_tonic)
data_corr = aggregate( data_y ~ sub*numOfTrial*numOfSwitch, data = data_res_phasic, FUN = "mean")
data_res_phasic = aggregate( data_y ~ sub*data_x*numOfSwitch, data = data_res_phasic, FUN = "mean")
data_res_phasic = aggregate( data_y ~ sub*numOfSwitch, data = data_res_phasic, FUN = "mean")
data_res_tonic = ind_data
data_res_tonic[data_res_tonic$numOfSwitch > 2,]$numOfSwitch = 2
data_res_tonic$numOfSwitch = go3[data_res_tonic$numOfSwitch+1]
t = aggregate( Size ~ sub*numOfTrial*numOfSwitch, data = data_res_tonic, FUN = "mean")
data_corr$Size = t$Size
data_numOfTrial = aggregate( numOfTrial ~ sub*numOfSwitch, data = data_res_tonic, FUN = "max")
View(data_numOfTrial)
View(data_res_tonic)
View(data_corr)
View(data_res_phasic)
data_res_phasic = ind_data[ind_data$data_x > analysisWin,]
data_res_phasic[data_res_phasic$numOfSwitch > 2,]$numOfSwitch = 2
data_res_phasic$numOfSwitch = go3[data_res_phasic$numOfSwitch+1]
data_corr = aggregate( . ~ sub*numOfTrial*numOfSwitch, data = data_res_phasic, FUN = "mean")
View(data_corr)
data_res_phasic = ind_data[ind_data$data_x > analysisWin,]
data_res_phasic[data_res_phasic$numOfSwitch > 2,]$numOfSwitch = 2
data_res_phasic$numOfSwitch = go3[data_res_phasic$numOfSwitch+1]
View(data_res_phasic)
data_corr = aggregate( . ~ sub*numOfTrial*numOfSwitch, data = data_res_phasic, FUN = "mean")
View(data_corr)
data_res_tonic = ind_data
data_res_tonic[data_res_tonic$numOfSwitch > 2,]$numOfSwitch = 2
data_res_tonic$numOfSwitch = go3[data_res_tonic$numOfSwitch+1]
t = aggregate( Size ~ sub*numOfTrial*numOfSwitch, data = data_res_tonic, FUN = "mean")
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e2_baseLinePupil_Switch/makeDataSet.R')
data_corr = aggregate( data_y ~ sub*numOfTrial*numOfSwitch, data = data_res_phasic, FUN = "mean")
data_timeCourse[data_timeCourse$numOfSwitch > 2,]$numOfSwitch = 2
data_timeCourse$numOfSwitch = go4[data_timeCourse$numOfSwitch+1]
data_timeCourse = aggregate( . ~ sub*data_x*numOfSwitch, data = data_timeCourse, FUN = "mean")
save(data_timeCourse,file = paste(currentLoc,"/dataset_timeCourse.rda", sep = ""))
data_res_phasic = ind_data[ind_data$data_x > analysisWin,]
data_res_phasic[data_res_phasic$numOfSwitch > 2,]$numOfSwitch = 2
data_res_phasic$numOfSwitch = go3[data_res_phasic$numOfSwitch+1]
data_corr = aggregate( data_y ~ sub*numOfTrial*numOfSwitch, data = data_res_phasic, FUN = "mean")
data_res_phasic = aggregate( data_y ~ sub*data_x*numOfSwitch, data = data_res_phasic, FUN = "mean")
data_res_phasic = aggregate( data_y ~ sub*numOfSwitch, data = data_res_phasic, FUN = "mean")
data_res_tonic = ind_data
data_res_tonic[data_res_tonic$numOfSwitch > 2,]$numOfSwitch = 2
data_res_tonic$numOfSwitch = go3[data_res_tonic$numOfSwitch+1]
t = aggregate( Size ~ sub*numOfTrial*numOfSwitch, data = data_res_tonic, FUN = "mean")
View(ind_data)
ind_RT <- data.frame(
sub = dat$sub,
numOfSwitch = dat$numOfSwitch,
RT = dat$RT
)
View(ind_RT)
View(ind_RT)
data_RT = aggregate( RT ~ sub*numOfSwitch, data = ind_RT, FUN = "mean")
View(data_RT)
ind_RT[ind_RT$numOfSwitch > 2,]$numOfSwitch = 2
data_RT = aggregate( RT ~ sub*numOfSwitch, data = ind_RT, FUN = "mean")
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e2_baseLinePupil_Switch/makeDataSet.R')
load("./data/dataset_e2.rda")
anovakun(data_RT,"sA",long=T, peta=T)
library(rjson)
library(ggplot2)
library(ggpubr)
library(Cairo)
library(gridExtra)
library(effsize)
library(BayesFactor)
library(rjson)
library(reshape)
if(exists(".anovakun.env")){
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
}else{
.anovakun.env <- new.env()
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
attach(.anovakun.env)
}
subName = NULL
for( i in seq(30)){
if(i<10){subName = rbind(subName,paste("s0", i, sep = ""))}
else{subName = rbind(subName,paste("s", i, sep = ""))}
}
makeSigPair <- function(forDrawingPost) {
sigPairA = NULL
if(length(forDrawingPost[["A"]]) > 1) {
t = as.character(forDrawingPost[["A"]][["bontab"]][["significance"]])
p = forDrawingPost[["A"]][["bontab"]][["adj.p"]]
for(i in 1:length(t)){
t0 = strsplit(t[i], " ")
if(t0[[1]][4] == "*"){
sigPairA = rbind(sigPairA,t0[[1]][1:3])
}
if(t0[[1]][2] == "="){
sigPairA = rbind(sigPairA,t0[[1]][1:3])
}
}
sigPairA = cbind(sigPairA,p)
}
sigPairB = NULL
if(length(forDrawingPost[["B"]]) > 1) {
t = as.character(forDrawingPost[["B"]][["bontab"]][["significance"]])
for(i in 1:length(t)){
t0 = strsplit(t[i], " ")
if(t0[[1]][4] == "*"){
sigPairB = rbind(sigPairB,t0[[1]][1:3])
}
}
}
return(rbind(sigPairA,sigPairB))
}
output1wayANOVA <- function(forDrawingSigANOVA) {
fVal <- c("A")
befSt <- paste("F(",forDrawingSigANOVA[1,]$df.col,",",round(forDrawingSigANOVA[2,]$df.col, digits = 3),") = ", signif(forDrawingSigANOVA[2,]$f.col,digits = 4),",", sep = '')
if( forDrawingSigANOVA[2,]$p.col > 0.001){
pVal<- paste("p = ",signif(forDrawingSigANOVA[2,]$p.col,digits = 3),",", sep = '')
}else{
pVal<- paste("p < 0.001,", sep = '')
}
etaVal<- paste("η2p =",signif(forDrawingSigANOVA[2,]$`p.eta^2`,digits = 3))
cat("Factor",fVal[1],": \n")
cat( befSt, pVal, etaVal,"\n")
}
anovakun(data_RT,"sA",long=T, peta=T)
tVal = forDrawingPost[["A"]][["bontab"]][["t"]]
pVal = forDrawingPost[["A"]][["bontab"]][["adj.p"]]
tVal
View(forDrawingPost)
forDrawingPost
View(forDrawingSigANOVA)
forDrawingPost
forDrawingSigANOVA[["2"]]
forDrawingSigANOVA[2]
forDrawingSigANOVA[2]
forDrawingSigANOVA
View(forDrawingSigANOVA)
View(output1wayANOVA)
forDrawingSigANOVA(forDrawingSigANOVA)
View(output2wayANOVA)
output1wayANOVA(forDrawingSigANOVA)
rt_sd = aggregate( . ~ numOfSwitch, data = data_RT, FUN = "sd")
rt_sd
View(rt_sd)
rt_sd = aggregate( RT ~ numOfSwitch, data = data_RT, FUN = "sd")
View(rt_sd)
rt_ave = aggregate( RT ~ numOfSwitch, data = data_RT, FUN = "mean")
View(rt_ave)
rt_ave[rt_ave$numOfSwitch == 0,]$RT
rt_ave$RT = round(rt_ave$RT,3)
View(rt_ave)
rt_sd$RT = round(rt_sd$RT,3)
rt_ave$RT = round(rt_ave$RT,3)
RT_table = forDrawingSigANOVA
RT_table
View(RT_table)
RT_table
RT_table[2,]
RT_table[2,]['p.col']
anovakun(data_res_tonic,"sA",long=T, peta=T)
anovakun(data_RT,"sA",long=T, peta=T)
RT_table
forDrawingSigANOVA
View(forDrawingSigANOVA)
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e1_endogenous_Switching/final/makeDataSet.R')
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e2_baseLinePupil_Switch/makeDataSet.R')
source('~/Box/R/Rscript_working/Pxx_auditoryIllusion/e1_endogenous_Switching/final/makeDataSet.R')
go1 = c("unswitch","switch")
load("./data/dataset_e1.rda")
############### RT ###############
anovakun(data_RT,"sA",long=T, peta=T)
rt_sd = aggregate( RT ~ numOfSwitch, data = data_RT, FUN = "sd")
anovakun(data_RT,"sA",long=T, peta=T)
rt_sd = aggregate( RT ~ Responses, data = data_RT, FUN = "sd")
rt_ave = aggregate( RT ~ Responses, data = data_RT, FUN = "mean")
rt_sd$RT = round(rt_sd$RT,3)
rt_ave$RT = round(rt_ave$RT,3)
View(data_RT)
anovakun(data_RT,"sA",long=T, peta=T)
knitr::opts_chunk$set(echo = TRUE)
# tinytex::install_tinytex()
#### file loading
load("dataset_e1.rda")
numOfSub = length(unique(data_e1$sub))
data_e1 = data_e1[data_e1$data_x >= 0,]
data_e1_anova = aggregate( data_y ~ sub*Pattern*Shape, data = data_e1, FUN = "mean")
anovakun(data_e1_anova,"sAB",gg=T,long=T, peta=T)
forDrawingSigANOVA
library(rjson)
library(ggplot2)
library(ggpubr)
library(Cairo)
library(gridExtra)
library(effsize)
library(BayesFactor)
library(rjson)
library(reshape)
if(exists(".anovakun.env")){
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
}else{
.anovakun.env <- new.env()
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
attach(.anovakun.env)
}
subName = NULL
for( i in seq(30)){
if(i<10){subName = rbind(subName,paste("s0", i, sep = ""))}
else{subName = rbind(subName,paste("s", i, sep = ""))}
}
makeSigPair <- function(forDrawingPost) {
sigPairA = NULL
if(length(forDrawingPost[["A"]]) > 1) {
t = as.character(forDrawingPost[["A"]][["bontab"]][["significance"]])
p = forDrawingPost[["A"]][["bontab"]][["adj.p"]]
for(i in 1:length(t)){
t0 = strsplit(t[i], " ")
if(t0[[1]][4] == "*"){
sigPairA = rbind(sigPairA,t0[[1]][1:3])
}
if(t0[[1]][2] == "="){
sigPairA = rbind(sigPairA,t0[[1]][1:3])
}
}
sigPairA = cbind(sigPairA,p)
}
sigPairB = NULL
if(length(forDrawingPost[["B"]]) > 1) {
t = as.character(forDrawingPost[["B"]][["bontab"]][["significance"]])
for(i in 1:length(t)){
t0 = strsplit(t[i], " ")
if(t0[[1]][4] == "*"){
sigPairB = rbind(sigPairB,t0[[1]][1:3])
}
}
}
return(rbind(sigPairA,sigPairB))
}
output1wayANOVA <- function(forDrawingSigANOVA) {
fVal <- c("A")
befSt <- paste("F(",forDrawingSigANOVA[1,]$df.col,",",round(forDrawingSigANOVA[2,]$df.col, digits = 3),") = ", signif(forDrawingSigANOVA[2,]$f.col,digits = 4),",", sep = '')
if( forDrawingSigANOVA[2,]$p.col > 0.001){
pVal<- paste("p = ",signif(forDrawingSigANOVA[2,]$p.col,digits = 3),",", sep = '')
}else{
pVal<- paste("p < 0.001,", sep = '')
}
etaVal<- paste("η2p =",signif(forDrawingSigANOVA[2,]$`p.eta^2`,digits = 3))
cat("Factor",fVal[1],": \n")
cat( befSt, pVal, etaVal,"\n")
}
#### file loading
load("dataset_e1.rda")
numOfSub = length(unique(data_e1$sub))
data_e1 = data_e1[data_e1$data_x >= 0,]
data_e1_anova = aggregate( data_y ~ sub*Pattern*Shape, data = data_e1, FUN = "mean")
anovakun(data_e1_anova,"sAB",gg=T,long=T, peta=T)
# time course of pupil ---------------------------------------------------
data_e1_ave = aggregate( data_y ~ data_x*Shape*Pattern, data = data_e1, FUN = "mean")
View(forDrawingPost)
View(forDrawingPost)
anovakun(data_e1_anova,"sAB",gg=T,long=T, peta=T)
forDrawingSigANOVA
View(forDrawingPost)
View(anovatab)
anovatab[2,]['df.col']
round(anovatab[2,]['df.col'],3)
View(anovatab)
round(anovatab[1,]['df.col'],3)
($F$(1,`r round(anovatab[1,]['df.col'],3)`) = `r round(anovatab[2,]['f.col'],3)`, $p$ = `r round(anovatab[2,]['p.col'],3)`, $\eta^2_p$ = `r round(anovatab[2,]['p.eta^2'],3)`).
setwd("~/Desktop/Github/Experimental_data/P04")
anovakun(data_e1_anova,"sAB",gg=T,long=T, peta=T)
View(forDrawingPost)
library(rjson)
library(ggplot2)
library(ggpubr)
library(Cairo)
library(gridExtra)
library(effsize)
library(BayesFactor)
library(rjson)
library(reshape)
if(exists(".anovakun.env")){
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
}else{
.anovakun.env <- new.env()
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
attach(.anovakun.env)
}
subName = NULL
for( i in seq(30)){
if(i<10){subName = rbind(subName,paste("s0", i, sep = ""))}
else{subName = rbind(subName,paste("s", i, sep = ""))}
}
makeSigPair <- function(forDrawingPost) {
sigPairA = NULL
if(length(forDrawingPost[["A"]]) > 1) {
t = as.character(forDrawingPost[["A"]][["bontab"]][["significance"]])
p = forDrawingPost[["A"]][["bontab"]][["adj.p"]]
for(i in 1:length(t)){
t0 = strsplit(t[i], " ")
if(t0[[1]][4] == "*"){
sigPairA = rbind(sigPairA,t0[[1]][1:3])
}
if(t0[[1]][2] == "="){
sigPairA = rbind(sigPairA,t0[[1]][1:3])
}
}
sigPairA = cbind(sigPairA,p)
}
sigPairB = NULL
if(length(forDrawingPost[["B"]]) > 1) {
t = as.character(forDrawingPost[["B"]][["bontab"]][["significance"]])
for(i in 1:length(t)){
t0 = strsplit(t[i], " ")
if(t0[[1]][4] == "*"){
sigPairB = rbind(sigPairB,t0[[1]][1:3])
}
}
}
return(rbind(sigPairA,sigPairB))
}
output1wayANOVA <- function(forDrawingSigANOVA) {
fVal <- c("A")
befSt <- paste("F(",forDrawingSigANOVA[1,]$df.col,",",round(forDrawingSigANOVA[2,]$df.col, digits = 3),") = ", signif(forDrawingSigANOVA[2,]$f.col,digits = 4),",", sep = '')
if( forDrawingSigANOVA[2,]$p.col > 0.001){
pVal<- paste("p = ",signif(forDrawingSigANOVA[2,]$p.col,digits = 3),",", sep = '')
}else{
pVal<- paste("p < 0.001,", sep = '')
}
etaVal<- paste("η2p =",signif(forDrawingSigANOVA[2,]$`p.eta^2`,digits = 3))
cat("Factor",fVal[1],": \n")
cat( befSt, pVal, etaVal,"\n")
}
#### file loading
load("dataset_e1.rda")
numOfSub = length(unique(data_e1$sub))
data_e1 = data_e1[data_e1$data_x >= 0,]
data_e1_anova = aggregate( data_y ~ sub*Pattern*Shape, data = data_e1, FUN = "mean")
anovakun(data_e1_anova,"sAB",gg=T,long=T, peta=T)
anovatab = forDrawingSigANOVA
# time course of pupil ---------------------------------------------------
data_e1_ave = aggregate( data_y ~ data_x*Shape*Pattern, data = data_e1, FUN = "mean")
View(forDrawingPost)
View(forDrawingSigANOVA)
mComp = forDrawingPost[["A:B"]][["simtab"]]
View(mComp)
View(anovatab)
round(anovatab[5,]['df.col'],3)
round(anovatab[6,]['f.col'],3)
round(anovatab[6,]['p.col'],3)
round(anovatab[6,]['p.eta^2'],3)
